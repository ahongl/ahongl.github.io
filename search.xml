<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F03%2F29%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
  <entry>
    <title><![CDATA[blog2]]></title>
    <url>%2F2018%2F03%2F28%2Fblog2%2F</url>
    <content type="text"><![CDATA[你好，深信服SIP欢迎你你好呀hellohi]]></content>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo+Node.js+Github搭建社区]]></title>
    <url>%2F2018%2F03%2F28%2FHexo%2BNode.js%2BGithub-creating-a-Community%2F</url>
    <content type="text"><![CDATA[1.gthub账号 (注册),并且已经创建自己的github Pages的项目(教程)2.本地电脑的公钥已经加入到Github上了,如何生成本机公钥3.本地电脑上已经安装Node.js,安装Git4.本地Git的邮箱、用户名已经配置成功安装Hexo是基于Node.js的,所以必须在电脑上安装Node.js，上面有教程。Node.js安装好了后,执行以下命令 1$ npm install hexo-cli -g npm是Node.js安装时自带的类库,是目前全球最大的类库之一,比Maven仓库还大,类似CentOS的yum源,Mac OX中brew的软件库 通过npm install可以直接安装基于Node.js的所有插件 安装完成后,我们一般在工作目录或者用户目录创建一个网站目录,比如blog目录 1$ mkdir blog 然后通过blog目录创建站点 1$ hexo init blog 出现 1INFO Start blogging with Hexo! 表示安装成功安装完成后,进入blog站点目录,安装一下npm插件支持 12$ cd blog$ npm install 启动站点 123$ hexo serverINFO Start processingINFO Hexo is running at http://localhost:4000/. Press Ctrl+C to stop. 查看站点 在浏览器中查看http://localhost:4000/一键部署到Github配置Github在blog目录,打开_config.yml 1$ vim _config.yml 修改配置文件_config.yml中deploy下的内容 12345668 # Deployment69 ## Docs: https://hexo.io/docs/deployment.html70 deploy:71 type: git72 repo: https://github.com/chwshuang/chwshuang.github.com.git73 branch: gh-pages 安装部署插件配置修改完成后,需要安装部署插件:安装 hexo-deployer-git 插件: 在blog目录执行以下命令即可 1$ npm install hexo-deployer-git --save 编译部署插件安装完成后,执行项目清理和静态网页生成 1$ hexo clean ; hexo genarate 安装完成后进行部署 1$ hexo deploy 查看结果然后到你的Github上项目的主页,看看master分支上的代码更新时间，为刚刚更新即为成功更新主题可以在：https://hexo.io/themes/这个网站上找到喜欢的主题下载进入blog目录,克隆主题到本地 12$ git clone https://github.com/tufu9441/XXXX.git themes/XXXXXXXX为你喜欢的主题的名字，本地的名字可以自己起 安装主题安装注意: 某些主题可能需要安装Node.js的插件,在安装主题时,最好在主题的Githu主页看看安装步骤下面是一个例子（maupassant-hexo）： 1234567$ vim _config.yml... 63 # Extensions 64 ## Plugins: https://hexo.io/plugins/ 65 ## Themes: https://hexo.io/themes/ 66 theme: maupassant 这个主题依赖jade和sass插件,所以在配置好主题后,还要进行安装插件 123$ npm install hexo-renderer-jade --save...$ npm install hexo-renderer-sass --save 查看先清空缓存,然后启动服务器,在本地浏览器输入localhost:4000/查看效果 123$ hexo clean $ hexo s --debug 自定义如果要修改主题的内容,可以在主题的Github主页上查看详细介绍写文章在blog目录下执行创建文章指令 12$ hexo new &quot;blog1&quot;INFO Created: ~/blog/source/_posts/blog1.md 然后修改source/_posts/blog1.md文件 12345678$ vim source/_posts/blog1.md 1 --- 2 title: blog1 3 date: 2016-08-25 18:50:03 4 tags: 5 --- 6 7 我的第一篇文章！ 清理后启动,就可以看到博客中新增加的文章了。 12$ hexo clean$ hexo s --debug 至此一个个人博客就搭建好啦~前往查看：https://ahongl.github.io/]]></content>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python-log]]></title>
    <url>%2F2018%2F03%2F27%2Fpython-log%2F</url>
    <content type="text"><![CDATA[这是日志产生系统这是日志随机生成系统这是多个系统日志模板生成系统logtemplate.py：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263#coding:utf-8import ConfigParserfrom string import Templateimport timeimport mathimport Queuefrom getIP import *def getLogByConf(num): cf = ConfigParser.ConfigParser() cf.read(&quot;logTemplate.conf&quot;) opts = cf.options(cf.sections()[0]) t = Template(cf.get(cf.sections()[0],opts[0])) dic=&#123;&#125; for i in range(1,len(opts)): dic[opts[i]] = cf.get(cf.sections()[0],opts[i]) dic[&apos;date&apos;] = time.ctime() getSysIp = getIP() dic[&apos;sysip&apos;] = getSysIp.get_ip_address() return t.substitute(dic) * numdef getLogByScreenPlay(num): cf = ConfigParser.ConfigParser() cf.read(&quot;logTemplate.conf&quot;) opts = cf.options(cf.sections()[0]) t = Template(cf.get(cf.sections()[0],opts[0])) dic=&#123;&#125; for i in range(1,len(opts)): dic[opts[i]] = cf.get(cf.sections()[0],opts[i]) dic[&apos;date&apos;] = time.ctime() getScreenPlayIp = getIP() dic[&apos;sysip&apos;] = getScreenPlayIp.get_ip_address() dic[&apos;srcip&apos;] = getScreenPlayIp.getIpByScreenPlay() return t.substitute(dic) * numdef getLogByRandom(num): cf = ConfigParser.ConfigParser() cf.read(&quot;logTemplate.conf&quot;) opts = cf.options(cf.sections()[0]) t = Template(cf.get(cf.sections()[0],opts[0])) dic=&#123;&#125; for i in range(1,len(opts)): dic[opts[i]] = cf.get(cf.sections()[0],opts[i]) getScreenPlayIp = getIP() dic[&apos;sysip&apos;] = getScreenPlayIp.get_ip_address() q = Queue.Queue() for i in range(0,num): dic[&apos;date&apos;] = time.ctime() getRandomIp = getIP() dic[&apos;srcip&apos;] = getRandomIp.getIpByRandom() dic[&apos;srcport&apos;] = int(random.uniform(0, 255)) log = t.substitute(dic) q.put(log) return q; getIP.py： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152#coding:utf-8import ConfigParserimport osimport socketimport fcntlimport structimport sysimport reimport random&quot;&quot;&quot;获取主机ip地址参数ifname: 通过&apos;lo&apos;获取的为环回地址, 通过&apos;eth0&apos;获取的为主机ip地址&quot;&quot;&quot;class getIP: def get_ip_address(self,ifname = &apos;lo&apos;): try: s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) return socket.inet_ntoa(fcntl.ioctl( s.fileno(), 0x8915, # SIOCGIFADDR struct.pack(&apos;256s&apos;, ifname[:15]) )[20:24]) except: ips = os.popen(&quot;LANG=C ifconfig | grep \&quot;inet addr\&quot; | grep -v \&quot;127.0.0.1\&quot;&quot; &quot; | awk -F \&quot;:\&quot; &apos;&#123;print $2&#125;&apos; | awk &apos;&#123;print $1&#125;&apos;&quot;).readlines() if len(ips) &gt; 0: return ips[0] return &apos;&apos; def getIpByConf(self): cf = ConfigParser.ConfigParser() cf.read(&quot;logTemplate.conf&quot;) opts = cf.options(cf.sections()[0]) if &apos;srcip&apos; in opts: return cf.get(cf.sections()[0],&apos;srcip&apos;) else: return &apos;配置文件未配置IP字段&apos; def getIpByScreenPlay(self): IpByScreenPlay = raw_input(&quot;请输入ip:\n&quot;) IsIP = re.search(&apos;^([01]?\d\d?|2[0-4]\d|25[0-5])\.([01]?\d\d?|2[0-4]\d|25[0-5])\.&apos; &apos;([01]?\d\d?|2[0-4]\d|25[0-5])\.([01]?\d\d?|2[0-4]\d|25[0-5])$&apos;, IpByScreenPlay) if IsIP: return IpByScreenPlay else: return &apos;127.0.0.1&apos; def getIpByRandom(self): IpByRandom = (str(int(random.uniform(0, 255))) + &apos;.&apos; + str(int(random.uniform(0, 255))) + &apos;.&apos; + str(int(random.uniform(0, 255))) + &apos;.&apos; + str(int(random.uniform(0, 255)))) return IpByRandom]]></content>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[blog1]]></title>
    <url>%2F2018%2F03%2F27%2Fblog1%2F</url>
    <content type="text"><![CDATA[我的第一篇斁欢迎观临欢迎你的到来hellohi]]></content>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
</search>
