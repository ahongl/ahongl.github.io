<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-03-27T21:10:25.346Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python-log</title>
    <link href="http://yoursite.com/2018/03/27/python-log/"/>
    <id>http://yoursite.com/2018/03/27/python-log/</id>
    <published>2018-03-27T21:07:46.000Z</published>
    <updated>2018-03-27T21:10:25.346Z</updated>
    
    <content type="html"><![CDATA[<p>logtemplate.py：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">#coding:utf-8</span><br><span class="line">import ConfigParser</span><br><span class="line">from string import Template</span><br><span class="line">import time</span><br><span class="line">import math</span><br><span class="line">import Queue</span><br><span class="line">from getIP import *</span><br><span class="line"></span><br><span class="line">def getLogByConf(num):</span><br><span class="line">    cf = ConfigParser.ConfigParser()</span><br><span class="line">    cf.read(&quot;logTemplate.conf&quot;)</span><br><span class="line"></span><br><span class="line">    opts = cf.options(cf.sections()[0])</span><br><span class="line">    t = Template(cf.get(cf.sections()[0],opts[0]))</span><br><span class="line"></span><br><span class="line">    dic=&#123;&#125;</span><br><span class="line">    for i in range(1,len(opts)):</span><br><span class="line">        dic[opts[i]] = cf.get(cf.sections()[0],opts[i])</span><br><span class="line">    dic[&apos;date&apos;] = time.ctime()</span><br><span class="line">    getSysIp = getIP()</span><br><span class="line">    dic[&apos;sysip&apos;] = getSysIp.get_ip_address()</span><br><span class="line"></span><br><span class="line">    return t.substitute(dic) * num</span><br><span class="line"></span><br><span class="line">def getLogByScreenPlay(num):</span><br><span class="line">    cf = ConfigParser.ConfigParser()</span><br><span class="line">    cf.read(&quot;logTemplate.conf&quot;)</span><br><span class="line"></span><br><span class="line">    opts = cf.options(cf.sections()[0])</span><br><span class="line">    t = Template(cf.get(cf.sections()[0],opts[0]))</span><br><span class="line"></span><br><span class="line">    dic=&#123;&#125;</span><br><span class="line">    for i in range(1,len(opts)):</span><br><span class="line">        dic[opts[i]] = cf.get(cf.sections()[0],opts[i])</span><br><span class="line">    dic[&apos;date&apos;] = time.ctime()</span><br><span class="line">    getScreenPlayIp = getIP()</span><br><span class="line">    dic[&apos;sysip&apos;] = getScreenPlayIp.get_ip_address()</span><br><span class="line">    dic[&apos;srcip&apos;] = getScreenPlayIp.getIpByScreenPlay()</span><br><span class="line"></span><br><span class="line">    return t.substitute(dic) * num</span><br><span class="line"></span><br><span class="line">def getLogByRandom(num):</span><br><span class="line">    cf = ConfigParser.ConfigParser()</span><br><span class="line">    cf.read(&quot;logTemplate.conf&quot;)</span><br><span class="line"></span><br><span class="line">    opts = cf.options(cf.sections()[0])</span><br><span class="line">    t = Template(cf.get(cf.sections()[0],opts[0]))</span><br><span class="line"></span><br><span class="line">    dic=&#123;&#125;</span><br><span class="line">    for i in range(1,len(opts)):</span><br><span class="line">        dic[opts[i]] = cf.get(cf.sections()[0],opts[i])</span><br><span class="line">    getScreenPlayIp = getIP()</span><br><span class="line">    dic[&apos;sysip&apos;] = getScreenPlayIp.get_ip_address()</span><br><span class="line"></span><br><span class="line">    q = Queue.Queue()</span><br><span class="line">    for i in range(0,num):</span><br><span class="line">        dic[&apos;date&apos;] = time.ctime()</span><br><span class="line">        getRandomIp = getIP()</span><br><span class="line">        dic[&apos;srcip&apos;] = getRandomIp.getIpByRandom()</span><br><span class="line">        dic[&apos;srcport&apos;] = int(random.uniform(0, 255))</span><br><span class="line">        log = t.substitute(dic)</span><br><span class="line">        q.put(log)</span><br><span class="line">    return q;</span><br></pre></td></tr></table></figure></p><p>getIP.py：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">#coding:utf-8</span><br><span class="line">import ConfigParser</span><br><span class="line">import os</span><br><span class="line">import socket</span><br><span class="line">import fcntl</span><br><span class="line">import struct</span><br><span class="line">import sys</span><br><span class="line">import re</span><br><span class="line">import random</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">获取主机ip地址</span><br><span class="line">参数ifname: 通过&apos;lo&apos;获取的为环回地址, 通过&apos;eth0&apos;获取的为主机ip地址</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">class getIP:</span><br><span class="line"></span><br><span class="line">def get_ip_address(self,ifname = &apos;lo&apos;):</span><br><span class="line">try:</span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">return socket.inet_ntoa(fcntl.ioctl(</span><br><span class="line">s.fileno(),</span><br><span class="line">0x8915, # SIOCGIFADDR</span><br><span class="line">struct.pack(&apos;256s&apos;, ifname[:15])</span><br><span class="line">)[20:24])</span><br><span class="line">except:</span><br><span class="line">ips = os.popen(&quot;LANG=C ifconfig | grep \&quot;inet addr\&quot; | grep -v \&quot;127.0.0.1\&quot;&quot;</span><br><span class="line">   &quot; | awk -F \&quot;:\&quot; &apos;&#123;print $2&#125;&apos; | awk &apos;&#123;print $1&#125;&apos;&quot;).readlines()</span><br><span class="line">if len(ips) &gt; 0:</span><br><span class="line">return ips[0]</span><br><span class="line">return &apos;&apos;</span><br><span class="line"></span><br><span class="line">def getIpByConf(self):</span><br><span class="line">cf = ConfigParser.ConfigParser()</span><br><span class="line">cf.read(&quot;logTemplate.conf&quot;)</span><br><span class="line">opts = cf.options(cf.sections()[0])</span><br><span class="line">if &apos;srcip&apos; in opts:</span><br><span class="line">return cf.get(cf.sections()[0],&apos;srcip&apos;)</span><br><span class="line">else:</span><br><span class="line">return &apos;配置文件未配置IP字段&apos;</span><br><span class="line"></span><br><span class="line">def getIpByScreenPlay(self):</span><br><span class="line">IpByScreenPlay = raw_input(&quot;请输入ip:\n&quot;)</span><br><span class="line">IsIP = re.search(&apos;^([01]?\d\d?|2[0-4]\d|25[0-5])\.([01]?\d\d?|2[0-4]\d|25[0-5])\.&apos;</span><br><span class="line">  &apos;([01]?\d\d?|2[0-4]\d|25[0-5])\.([01]?\d\d?|2[0-4]\d|25[0-5])$&apos;, IpByScreenPlay)</span><br><span class="line">if IsIP:</span><br><span class="line">return IpByScreenPlay</span><br><span class="line">else:</span><br><span class="line">return &apos;127.0.0.1&apos;</span><br><span class="line"></span><br><span class="line">def getIpByRandom(self):</span><br><span class="line">IpByRandom = (str(int(random.uniform(0, 255))) + &apos;.&apos; + str(int(random.uniform(0, 255))) +</span><br><span class="line">                 &apos;.&apos; + str(int(random.uniform(0, 255))) + &apos;.&apos; + str(int(random.uniform(0, 255))))</span><br><span class="line">return IpByRandom</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;logtemplate.py：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>blog1</title>
    <link href="http://yoursite.com/2018/03/27/blog1/"/>
    <id>http://yoursite.com/2018/03/27/blog1/</id>
    <published>2018-03-27T18:01:47.000Z</published>
    <updated>2018-03-27T18:02:46.046Z</updated>
    
    <content type="html"><![CDATA[<p>我的第一篇文章！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我的第一篇文章！&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/03/27/hello-world/"/>
    <id>http://yoursite.com/2018/03/27/hello-world/</id>
    <published>2018-03-27T16:50:46.283Z</published>
    <updated>2018-03-27T16:50:46.283Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
