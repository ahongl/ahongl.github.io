<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-03-28T10:05:48.588Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/03/28/Hexo+Node.js+Github-creating-a-Community/"/>
    <id>http://yoursite.com/2018/03/28/Hexo+Node.js+Github-creating-a-Community/</id>
    <published>2018-03-28T10:05:48.588Z</published>
    <updated>2018-03-28T10:05:48.588Z</updated>
    
    <content type="html"><![CDATA[<p>thub账号 (<a href="https://github.com/" target="_blank" rel="noopener">注册</a>),并且已经创建自己的github Pages的项目(<a href="https://pages.github.com/" target="_blank" rel="noopener">教程</a>)<br>本地电脑的公钥已经加入到Github上了,<a href="http://blog.csdn.net/hustpzb/article/details/8230454" target="_blank" rel="noopener">如何生成本机公钥</a><br>本地电脑上已经<a href="http://blog.csdn.net/baihuaxiu123/article/details/51868142" target="_blank" rel="noopener">安装Node.js</a>,安装Git<br>本地Git的邮箱、用户名已经配置成功<br><a id="more"></a><br><strong>安装</strong><br>Hexo是基于Node.js的,所以必须在电脑上安装Node.js，上面有教程。<br>Node.js安装好了后,执行以下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br></pre></td></tr></table></figure><ul><li>npm是Node.js安装时自带的类库,是目前全球最大的类库之一,比Maven仓库还大,类似CentOS的yum源,Mac</li><li>OX中brew的软件库 通过npm install可以直接安装基于Node.js的所有插件</li></ul><p>安装完成后,我们一般在工作目录或者用户目录创建一个网站目录,比如blog目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir blog</span><br></pre></td></tr></table></figure><p>然后通过blog目录创建站点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init blog</span><br></pre></td></tr></table></figure><p>出现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO  Start blogging with Hexo!</span><br></pre></td></tr></table></figure><p>表示安装成功<br>安装完成后,进入blog站点目录,安装一下npm插件支持</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd blog</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><p><strong>启动站点</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure><p><strong>查看站点</strong></p><p>在浏览器中查看<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a><br><strong>一键部署到Github</strong><br><strong>配置Github</strong><br>在blog目录,打开_config.yml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim _config.yml</span><br></pre></td></tr></table></figure><p>修改配置文件_config.yml中deploy下的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">68 # Deployment</span><br><span class="line">69 ## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">70 deploy:</span><br><span class="line">71   type: git</span><br><span class="line">72   repo: https://github.com/chwshuang/chwshuang.github.com.git</span><br><span class="line">73 branch: gh-pages</span><br></pre></td></tr></table></figure><p><strong>安装部署插件</strong><br>配置修改完成后,需要安装部署插件:<br>安装 hexo-deployer-git 插件: 在blog目录执行以下命令即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p><strong>编译部署</strong><br>插件安装完成后,执行项目清理和静态网页生成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean ; hexo genarate</span><br></pre></td></tr></table></figure><p>安装完成后进行部署</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p><strong>查看结果</strong><br>然后到你的Github上项目的主页,看看master分支上的代码更新时间，为刚刚更新即为成功<br><strong>更新主题</strong><br>可以在：<a href="https://hexo.io/themes/这个网站上找到喜欢的主题" target="_blank" rel="noopener">https://hexo.io/themes/这个网站上找到喜欢的主题</a><br><strong>下载</strong><br>进入blog目录,克隆主题到本地</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/tufu9441/XXXX.git themes/XXXX</span><br><span class="line">XXXX为你喜欢的主题的名字，本地的名字可以自己起</span><br></pre></td></tr></table></figure><p><strong>安装主题</strong><br><strong>安装</strong><br><em>注意: 某些主题可能需要安装Node.js的插件,在安装主题时,最好在主题的Githu主页看看安装步骤</em><br>下面是一个例子（maupassant-hexo）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ vim _config.yml</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"> 63 # Extensions</span><br><span class="line"> 64 ## Plugins: https://hexo.io/plugins/</span><br><span class="line"> 65 ## Themes: https://hexo.io/themes/</span><br><span class="line"> 66 theme: maupassant</span><br></pre></td></tr></table></figure><p>这个主题依赖jade和sass插件,所以在配置好主题后,还要进行安装插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-renderer-jade --save</span><br><span class="line">...</span><br><span class="line">$ npm install hexo-renderer-sass --save</span><br></pre></td></tr></table></figure><p><strong>查看</strong><br>先清空缓存,然后启动服务器,在本地浏览器输入<a href="localhost:4000/" target="_blank" rel="noopener">localhost:4000/</a>查看效果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean </span><br><span class="line"></span><br><span class="line">$ hexo s --debug</span><br></pre></td></tr></table></figure><p><strong>自定义</strong><br>如果要修改主题的内容,可以在主题的Github主页上查看详细介绍<br><strong>写文章</strong><br>在blog目录下执行创建文章指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new &quot;blog1&quot;</span><br><span class="line">INFO  Created: ~/blog/source/_posts/blog1.md</span><br></pre></td></tr></table></figure><p>然后修改source/_posts/blog1.md文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ vim source/_posts/blog1.md</span><br><span class="line">  1 ---</span><br><span class="line">  2 title: blog1</span><br><span class="line">  3 date: 2016-08-25 18:50:03</span><br><span class="line">  4 tags:</span><br><span class="line">  5 ---</span><br><span class="line">  6 </span><br><span class="line">  7 我的第一篇文章！</span><br></pre></td></tr></table></figure><p>清理后启动,就可以看到博客中新增加的文章了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo s --debug</span><br></pre></td></tr></table></figure><p>至此一个个人博客就搭建好啦~<br>前往查看：<a href="https://ahongl.github.io/" target="_blank" rel="noopener">https://ahongl.github.io/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;thub账号 (&lt;a href=&quot;https://github.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;注册&lt;/a&gt;),并且已经创建自己的github Pages的项目(&lt;a href=&quot;https://pages.github.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;教程&lt;/a&gt;)&lt;br&gt;本地电脑的公钥已经加入到Github上了,&lt;a href=&quot;http://blog.csdn.net/hustpzb/article/details/8230454&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;如何生成本机公钥&lt;/a&gt;&lt;br&gt;本地电脑上已经&lt;a href=&quot;http://blog.csdn.net/baihuaxiu123/article/details/51868142&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;安装Node.js&lt;/a&gt;,安装Git&lt;br&gt;本地Git的邮箱、用户名已经配置成功&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/03/27/hello-world/"/>
    <id>http://yoursite.com/2018/03/27/hello-world/</id>
    <published>2018-03-27T21:40:06.002Z</published>
    <updated>2018-03-27T21:40:05.983Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>python-log</title>
    <link href="http://yoursite.com/2018/03/27/python-log/"/>
    <id>http://yoursite.com/2018/03/27/python-log/</id>
    <published>2018-03-27T21:07:46.000Z</published>
    <updated>2018-03-27T21:44:48.336Z</updated>
    
    <content type="html"><![CDATA[<p>这是日志产生系统<br>这是日志随机生成系统<br>这是多个系统日志模板生成系统<br><a id="more"></a><br>logtemplate.py：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">#coding:utf-8</span><br><span class="line">import ConfigParser</span><br><span class="line">from string import Template</span><br><span class="line">import time</span><br><span class="line">import math</span><br><span class="line">import Queue</span><br><span class="line">from getIP import *</span><br><span class="line"></span><br><span class="line">def getLogByConf(num):</span><br><span class="line">    cf = ConfigParser.ConfigParser()</span><br><span class="line">    cf.read(&quot;logTemplate.conf&quot;)</span><br><span class="line"></span><br><span class="line">    opts = cf.options(cf.sections()[0])</span><br><span class="line">    t = Template(cf.get(cf.sections()[0],opts[0]))</span><br><span class="line"></span><br><span class="line">    dic=&#123;&#125;</span><br><span class="line">    for i in range(1,len(opts)):</span><br><span class="line">        dic[opts[i]] = cf.get(cf.sections()[0],opts[i])</span><br><span class="line">    dic[&apos;date&apos;] = time.ctime()</span><br><span class="line">    getSysIp = getIP()</span><br><span class="line">    dic[&apos;sysip&apos;] = getSysIp.get_ip_address()</span><br><span class="line"></span><br><span class="line">    return t.substitute(dic) * num</span><br><span class="line"></span><br><span class="line">def getLogByScreenPlay(num):</span><br><span class="line">    cf = ConfigParser.ConfigParser()</span><br><span class="line">    cf.read(&quot;logTemplate.conf&quot;)</span><br><span class="line"></span><br><span class="line">    opts = cf.options(cf.sections()[0])</span><br><span class="line">    t = Template(cf.get(cf.sections()[0],opts[0]))</span><br><span class="line"></span><br><span class="line">    dic=&#123;&#125;</span><br><span class="line">    for i in range(1,len(opts)):</span><br><span class="line">        dic[opts[i]] = cf.get(cf.sections()[0],opts[i])</span><br><span class="line">    dic[&apos;date&apos;] = time.ctime()</span><br><span class="line">    getScreenPlayIp = getIP()</span><br><span class="line">    dic[&apos;sysip&apos;] = getScreenPlayIp.get_ip_address()</span><br><span class="line">    dic[&apos;srcip&apos;] = getScreenPlayIp.getIpByScreenPlay()</span><br><span class="line"></span><br><span class="line">    return t.substitute(dic) * num</span><br><span class="line"></span><br><span class="line">def getLogByRandom(num):</span><br><span class="line">    cf = ConfigParser.ConfigParser()</span><br><span class="line">    cf.read(&quot;logTemplate.conf&quot;)</span><br><span class="line"></span><br><span class="line">    opts = cf.options(cf.sections()[0])</span><br><span class="line">    t = Template(cf.get(cf.sections()[0],opts[0]))</span><br><span class="line"></span><br><span class="line">    dic=&#123;&#125;</span><br><span class="line">    for i in range(1,len(opts)):</span><br><span class="line">        dic[opts[i]] = cf.get(cf.sections()[0],opts[i])</span><br><span class="line">    getScreenPlayIp = getIP()</span><br><span class="line">    dic[&apos;sysip&apos;] = getScreenPlayIp.get_ip_address()</span><br><span class="line"></span><br><span class="line">    q = Queue.Queue()</span><br><span class="line">    for i in range(0,num):</span><br><span class="line">        dic[&apos;date&apos;] = time.ctime()</span><br><span class="line">        getRandomIp = getIP()</span><br><span class="line">        dic[&apos;srcip&apos;] = getRandomIp.getIpByRandom()</span><br><span class="line">        dic[&apos;srcport&apos;] = int(random.uniform(0, 255))</span><br><span class="line">        log = t.substitute(dic)</span><br><span class="line">        q.put(log)</span><br><span class="line">    return q;</span><br></pre></td></tr></table></figure></p><p>getIP.py：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">#coding:utf-8</span><br><span class="line">import ConfigParser</span><br><span class="line">import os</span><br><span class="line">import socket</span><br><span class="line">import fcntl</span><br><span class="line">import struct</span><br><span class="line">import sys</span><br><span class="line">import re</span><br><span class="line">import random</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">获取主机ip地址</span><br><span class="line">参数ifname: 通过&apos;lo&apos;获取的为环回地址, 通过&apos;eth0&apos;获取的为主机ip地址</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">class getIP:</span><br><span class="line"></span><br><span class="line">def get_ip_address(self,ifname = &apos;lo&apos;):</span><br><span class="line">try:</span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">return socket.inet_ntoa(fcntl.ioctl(</span><br><span class="line">s.fileno(),</span><br><span class="line">0x8915, # SIOCGIFADDR</span><br><span class="line">struct.pack(&apos;256s&apos;, ifname[:15])</span><br><span class="line">)[20:24])</span><br><span class="line">except:</span><br><span class="line">ips = os.popen(&quot;LANG=C ifconfig | grep \&quot;inet addr\&quot; | grep -v \&quot;127.0.0.1\&quot;&quot;</span><br><span class="line">   &quot; | awk -F \&quot;:\&quot; &apos;&#123;print $2&#125;&apos; | awk &apos;&#123;print $1&#125;&apos;&quot;).readlines()</span><br><span class="line">if len(ips) &gt; 0:</span><br><span class="line">return ips[0]</span><br><span class="line">return &apos;&apos;</span><br><span class="line"></span><br><span class="line">def getIpByConf(self):</span><br><span class="line">cf = ConfigParser.ConfigParser()</span><br><span class="line">cf.read(&quot;logTemplate.conf&quot;)</span><br><span class="line">opts = cf.options(cf.sections()[0])</span><br><span class="line">if &apos;srcip&apos; in opts:</span><br><span class="line">return cf.get(cf.sections()[0],&apos;srcip&apos;)</span><br><span class="line">else:</span><br><span class="line">return &apos;配置文件未配置IP字段&apos;</span><br><span class="line"></span><br><span class="line">def getIpByScreenPlay(self):</span><br><span class="line">IpByScreenPlay = raw_input(&quot;请输入ip:\n&quot;)</span><br><span class="line">IsIP = re.search(&apos;^([01]?\d\d?|2[0-4]\d|25[0-5])\.([01]?\d\d?|2[0-4]\d|25[0-5])\.&apos;</span><br><span class="line">  &apos;([01]?\d\d?|2[0-4]\d|25[0-5])\.([01]?\d\d?|2[0-4]\d|25[0-5])$&apos;, IpByScreenPlay)</span><br><span class="line">if IsIP:</span><br><span class="line">return IpByScreenPlay</span><br><span class="line">else:</span><br><span class="line">return &apos;127.0.0.1&apos;</span><br><span class="line"></span><br><span class="line">def getIpByRandom(self):</span><br><span class="line">IpByRandom = (str(int(random.uniform(0, 255))) + &apos;.&apos; + str(int(random.uniform(0, 255))) +</span><br><span class="line">                 &apos;.&apos; + str(int(random.uniform(0, 255))) + &apos;.&apos; + str(int(random.uniform(0, 255))))</span><br><span class="line">return IpByRandom</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是日志产生系统&lt;br&gt;这是日志随机生成系统&lt;br&gt;这是多个系统日志模板生成系统&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>blog1</title>
    <link href="http://yoursite.com/2018/03/27/blog1/"/>
    <id>http://yoursite.com/2018/03/27/blog1/</id>
    <published>2018-03-27T18:01:47.000Z</published>
    <updated>2018-03-27T21:43:31.849Z</updated>
    
    <content type="html"><![CDATA[<p>我的第一篇斁<br>欢迎观临<br>欢迎你的到来<br><a id="more"></a><br>hello<br>hi</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我的第一篇斁&lt;br&gt;欢迎观临&lt;br&gt;欢迎你的到来&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
